name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: make test-ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Check code formatting
        run: make format-ci

      - name: Run linters
        run: make lint-ci

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          # Windows ARM64 is not commonly needed
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} make build-ci
          echo "Built successfully for ${{ matrix.os }}/${{ matrix.arch }}"

  # This job ensures all required checks pass
  ci-success:
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.test.result }}" != "success" || 
                "${{ needs.lint.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All CI checks passed!"
